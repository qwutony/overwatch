variables
{
	global:
		0: RoundStarted
		1: BaseDestroyer
		2: Wavenumber
		3: Botsleft
		4: Timer
		5: Maxmoneygiven
		6: each10rounds
		7: MachineHero
		8: OriginalVector0
		9: OriginalVector1
		10: OriginalVector2
		11: OriginalVector3
		12: OriginalVector4
		13: OriginalVector5
		14: OriginalVector6
		15: OriginalVector7
		16: OriginalVector8
		17: playerTargetList
		18: losHeightCheck

	player:
		0: IsReady
		1: PlayerMoney
		2: ab_var_2
		3: Maxhealthbuys
		4: Damagebuys
		5: Healbuys
		6: Lastpos
		7: Inshop
		8: LastFacing
		47: target
}

subroutines
{
	0: BaseDestroy
}

rule("Store Original Path")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.OriginalVector0 = Vector(14.74, -0.45, -133.42);
		Global.OriginalVector1 = Vector(38.03, -3.27, -134.21);
		Global.OriginalVector2 = Vector(47.76, -4.32, -122.80);
		Global.OriginalVector3 = Vector(42.24, -6.59, -112.55);
		Global.OriginalVector4 = Vector(33.87, -9.55, -104.28);
		Global.OriginalVector5 = Vector(25.81, -6.80, -96.53);
		Global.OriginalVector6 = Vector(19.09, -3.60, -89.68);
		Global.OriginalVector7 = Vector(17.79, -3.61, -81.54);
		Global.OriginalVector8 = Vector(25.52, -3.24, -73.10);
	}
}

rule("Spawn Units")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RoundStarted == True;
		Number Of Players(Team 2) < 15;
		Global.Botsleft > Number Of Players(Team 2);
	}

	actions
	{
		Wait(Random Integer(0.500, 2), Abort When False);
		Create Dummy Bot(Hero(Orisa), Team 2, -1, Vector(14.467, -0.700, -132.932), Direction Towards(Vector(14.467, -0.700, -132.932),
			Vector(14.467, -0.700, -132.932)));
		Loop If Condition Is True;
	}
}

rule("Ready Up")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		If(Event Player.IsReady == True);
			Event Player.IsReady = False;
		Else;
			Event Player.IsReady = True;
	}
}

rule("All Ready Start Round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is True For All(All Players(Team 1), Current Array Element.IsReady == True) || Global.Timer <= 0) == True;
		Global.RoundStarted == False;
	}

	actions
	{
		Global.Botsleft = 5 * Global.Wavenumber;
		Global.RoundStarted = True;
		Big Message(All Players(All Teams), Custom String("BOTS INCOMING!"));
	}
}

rule("Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Timer = 20;
		Global.Wavenumber = 1;
		Global.RoundStarted = False;
		Create HUD Text(All Players(All Teams), Custom String("Wave: {0}", Global.Wavenumber), Null, Null, Top, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Global.RoundStarted == True ? All Players(All Teams) : Null, Custom String("Bots left: {0}", Global.Botsleft),
			Null, Null, Top, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Pause Match Time;
		Create HUD Text(Global.RoundStarted != True ? All Players(All Teams) : Null, Custom String("Press {1} to ready up!", Null,
			Input Binding String(Button(Melee))), Null, Null, Top, 3, Color(White), Color(White), Color(White), Visible To and String,
			Visible Never);
		Create Effect(All Players(All Teams), Light Shaft, Color(White), Vector(14.74, -3.5, -133.42), 3, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Enemy Spawnpoint"), Vector(14.74, -0.45, -133.42), 1, Do Not Clip,
			Visible To Position and String, Color(Aqua), Visible Always);
		Create HUD Text(Global.RoundStarted != True && Number Of Players(Team 1) > 1 ? All Players(All Teams) : Null, Custom String(
			"Next round starts in {0}", Global.Timer), Null, Null, Top, 3, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Protect the First Checkpoint!"), Vector(25.52, -3.24, -73.10), 1, Do Not Clip,
			Visible To Position and String, Color(Red), Visible Always);
		Create HUD Text(All Players(Team 1), Custom String("STATS"), Null, Null, Right, 0, Color(White), Color(White), Color(White),
			Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Custom String("Press {0} and {2} to {1} the shop!", Input Binding String(Button(Crouch)),
			Local Player.Inshop ? Custom String("exit") : Custom String("enter"), Input Binding String(Button(Reload))), Null, Null, Left,
			-1, Color(Turquoise), Color(White), Color(White), Visible To and String, Default Visibility);
		Create Progress Bar HUD Text(Is Hero Being Played(Hero(Roadhog), Team 2) ? All Players(All Teams) : Null, Round To Integer(
			Normalized Health(Players On Hero(Hero(Roadhog), Team 2)) * 100, Up), Custom String("TANK HEALTH"), Top, 4, Color(Red), Color(
			Orange), Visible To Values and Color, Default Visibility);
		Global.each10rounds = Array(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
		Global.MachineHero = Hero(Orisa);
	}
}

rule("Remove Dead Bots")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		Global.Botsleft = Global.Botsleft - 1;
		Wait(1, Ignore Condition);
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
	}
}

rule("Basic Bot Configuration")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.RoundStarted == True;
	}

	actions
	{
		Set Move Speed(Event Player, 50 + (Global.Wavenumber < 15 ? 10 * (Global.Wavenumber - 1) : 150));
		Set Damage Dealt(Event Player, Global.Wavenumber >= 1 ? 1 : 1);
		If(Hero Of(Event Player) == Hero(Roadhog));
			Start Forcing Dummy Bot Name(Event Player, Custom String("TANK"));
			Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Red), Always);
			Set Max Health(Event Player, 1000);
			Set Damage Dealt(Event Player, 30);
			Set Damage Received(Event Player, 50);
			Set Move Speed(Event Player, 25);
			Set Knockback Received(Event Player, 0);
			Set Player Health(Event Player, 100000);
		End;
		Wait(0.250, Ignore Condition);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector0, Global.OriginalVector1), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		While(Distance Between(Position Of(Event Player), Global.OriginalVector0) > 2)
		{
		    Wait(0.5, Ignore Condition);
		    Start Throttle In Direction(Event Player, Direction Towards(Current Position Of(Event Player), Global.OriginalVector0), 1, To World, Replace existing throttle, Direction, Magnitude(1));
		}
		End;
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector1, Global.OriginalVector2), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector2) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector2, Global.OriginalVector3), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector3) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector3, Global.OriginalVector4), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector4) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector4, Global.OriginalVector5), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector5) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector5, Global.OriginalVector6), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector6) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector6, Global.OriginalVector7), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector7) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Global.OriginalVector7, Global.OriginalVector8), 1,
		    To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Distance Between(Position Of(Event Player), Global.OriginalVector8) < 2, 99999);
		Stop Throttle In Direction(Event Player);
		Press Button(Event Player, Button(Jump));
		Wait(0.100, Ignore Condition);
		Wait Until(Is On Ground(Event Player) && Is Alive(Event Player), 99999);
		Global.BaseDestroyer = Event Player;
		Start Rule(BaseDestroy, Do Nothing);
		End;
	}
}

rule("Bot attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is True For Any(Filtered Array(Global.playerTargetList, Current Array Element.target == False),
			!Current Array Element.target && Distance Between(Position Of(Event Player), Position Of(Current Array Element))
			< 150 && Is In Line of Sight(Position Of(Current Array Element) + Vector(0, Global.losHeightCheck, 0), Position Of(
			Event Player) + Vector(0, Global.losHeightCheck, 0), Barriers Do Not Block LOS)) == True;
		Hero Of(Event Player) != Hero(Roadhog);
	}

	actions
	{
		If(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Closest Player To(Eye Position(Event Player),
			Team 1)), All Players(Team 1), Event Player, True), Eye Position(Closest Player To(Eye Position(Event Player), Team 1))) < 1);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
				All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
				To World, Direction and Turn Rate);
			Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(Eye Position(First Of(
				Sorted Array(Filtered Array(All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player,
				Current Array Element)))), Team 1))), To World);
			Start Holding Button(Event Player, Button(Primary Fire));
			If(Random Integer(0, 10) == 0);
				Press Button(Event Player, Button(Ability 1));
			End;
			Event Player.ab_var_2 = False;
		Else;
			Stop Holding Button(Event Player, Button(Primary Fire));
			Stop Facing(Event Player);
			Event Player.ab_var_2 = True;
		End;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Base destroy")
{
	event
	{
		Subroutine;
		BaseDestroy;
	}

	actions
	{
		Kill(Players Within Radius(Vector(87.747, 13.816, -69.451), 30, All Teams, Surfaces And All Barriers), Global.BaseDestroyer);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player, 1);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Red), Vector(87.747, 14, -69.451), 2);
		Stop Throttle In Direction(All Players(Team 2));
		Big Message(All Players(All Teams), Custom String("BOTS WIN!"));
		Wait(2, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("you survived {0} waves!", Global.Wavenumber - 1));
		Declare Team Victory(Team 2);
	}
}

rule("setup hud")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Event Player),
			Custom String("${0}", Event Player.PlayerMoney), Global.RoundStarted != True ? (Event Player.IsReady == True ? Custom String(
			"READY") : Custom String("NOT READY")) : Custom String(""), Left, 0, Color(White), Color(White),
			Event Player.IsReady == True ? Color(Green) : Color(Red), Visible To String and Color, Default Visibility);
	}
}

rule("Player leaves")
{
	event
	{
		Player Left Match;
		Team 1;
		All;
	}

	actions
	{
		Destroy HUD Text(Last Text ID);
	}
}

rule("all dead win")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RoundStarted == True;
		Global.Botsleft <= 0;
	}

	actions
	{
		Heal(All Living Players(Team 1), Null, 9999);
		All Players(Team 1).PlayerMoney += 250;
		Global.Maxmoneygiven += 250;
		All Players(Team 1).IsReady = False;
		Global.Timer = 60;
		Global.RoundStarted = False;
		Big Message(All Players(All Teams), Custom String("YOU WIN!"));
		Global.Wavenumber += 1;
	}
}

rule("Player Setup")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Disable Game Mode HUD(Event Player);
		Event Player.PlayerMoney = 1000 + Global.Maxmoneygiven;
		Create HUD Text(Event Player.Maxhealthbuys > 0 ? Event Player : Null, Null, Null, Custom String("Health +{0}",
			15 * Event Player.Maxhealthbuys), Right, 1, Color(White), Color(White), Color(Green), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player.Damagebuys > 0 ? Event Player : Null, Null, Null, Custom String("Damage +{0}",
			10 * Event Player.Damagebuys), Right, 2, Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.Healbuys > 0 ? Event Player : Null, Null, Null, Custom String("Healing +{0}",
			10 * Event Player.Healbuys), Right, 3, Color(White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
	}
}

rule("timer lower")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RoundStarted != True;
		Global.Timer > 0;
		Number Of Players(Team 1) > 1;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.Timer -= 1;
		Loop If Condition Is True;
	}
}

rule("Bot Warn close")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Vector(87.747, 13.500, -69.451)) < 30;
	}

	actions
	{
		Wait(1, Abort When False);
		Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Red), Always);
		Create Icon(All Players(All Teams), Eye Position(Event Player), Exclamation Mark, Visible To and Position, Color(Red), True);
	}
}

rule("Bots warn message")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Living Players(Team 2), Distance Between(Position Of(Current Array Element), Vector(87.747, 13.500, -69.451))
			< 30) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Big Message(All Players(All Teams), Custom String("The bots are near the target! stop them!"));
	}
}

rule("give money on kill")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	actions
	{
		Event Player.PlayerMoney += 10;
	}
}

rule("Shop text")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("Shop: press {0} to buy!", Input Binding String(Button(Reload))),
			Vector(130, 14, -1.327), 1, Clip Against Surfaces, Visible To Position and String, Color(White), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Health +10: $250"), Vector(126, 12, 0.750), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Green), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Damage +10: $500"), Vector(130, 12, 0.750), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Red), Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("Healing +10: $250"), Vector(134, 12, 0.750), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Yellow), Visible Always);
		Create Effect(All Players(All Teams), Ring, Color(Green), Vector(126, 11, 0.750), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Red), Vector(130, 11, 0.750), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Yellow), Vector(134, 11, 0.750), 1, Visible To Position and Radius);
	}
}

rule("Buy: health")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Distance Between(Position Of(Event Player), Vector(126, 11, 0.750)) < 1;
	}

	actions
	{
		If(Event Player.PlayerMoney >= 250);
			Event Player.PlayerMoney -= 250;
			Event Player.Maxhealthbuys += 1;
			Set Max Health(Event Player, 100 + 10 * Event Player.Maxhealthbuys);
			Heal(Event Player, Null, 99999);
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Position Of(Event Player), 10);
			Small Message(Event Player, Custom String("Brought!"));
		Else;
			Small Message(Event Player, Custom String("not enough money!"));
	}
}

rule("Buy: damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Vector(130, 11, 0.750)) < 1;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		If(Event Player.PlayerMoney >= 500);
			Event Player.PlayerMoney -= 500;
			Event Player.Damagebuys += 1;
			Set Damage Dealt(Event Player, 100 + 10 * Event Player.Damagebuys);
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Position Of(Event Player), 10);
			Small Message(Event Player, Custom String("Brought!"));
		Else;
			Small Message(Event Player, Custom String("not enough money!"));
	}
}

rule("Buy: healing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Vector(134, 11, 0.750)) < 1;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		If(Event Player.PlayerMoney >= 250);
			Event Player.PlayerMoney -= 250;
			Event Player.Healbuys += 1;
			Set Healing Dealt(Event Player, 100 + 10 * Event Player.Healbuys);
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Position Of(Event Player), 10);
			Small Message(Event Player, Custom String("Brought!"));
		Else;
			Small Message(Event Player, Custom String("not enough money!"));
	}
}

rule("Enter/exit shop")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.Inshop != True);
			Event Player.Lastpos = Position Of(Event Player);
			Event Player.LastFacing = Facing Direction Of(Event Player);
			Event Player.Inshop = True;
			Teleport(Event Player, Vector(132.176, 11.898, 6.491));
			Set Facing(Event Player, Direction Towards(Vector(132.140, 11.898, 6.352), Vector(131.633, 11.898, 4.436)), To World);
		Else;
			Teleport(Event Player, Event Player.Lastpos);
			Set Facing(Event Player, Event Player.LastFacing, To World);
			Event Player.Inshop = False;
			If(Is In Air(Event Player) == True);
				Teleport(Event Player, Nearest Walkable Position(Event Player.Lastpos));
	}
}

rule("spawn tank")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RoundStarted == True;
		Is True For Any(Global.each10rounds, Global.Wavenumber == Current Array Element) == True;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Roadhog), Team 2, -1, Vector(-11.587, 1.967, -7.274), Direction Towards(Vector(-11.587, 1.967, -7.274),
			Vector(-3.892, 2.993, -27.886)));
		Big Message(All Players(All Teams), Custom String("TANK INCOMING!"));
	}
}

rule("spawn bomb")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RoundStarted == True;
		Is Dead(Last Created Entity) == All Players(Team 2);
	}

	actions
	{
		Create Dummy Bot(Hero(Ramattra), Team 2, Max Health(20000 + 0), Vector(-11.587, 1.967, -7.274), Direction Towards(Vector(-11.587,
			1.967, -7.274), Vector(-3.892, 2.993, -27.886)));
		Big Message(All Players(Team 1), Custom String("RAMATTRA THE BOMB SPAWNS!"));
	}
}
